programa ejercicio2

procesos
  
  proceso depositarPerdedor(ES cantidad: numero; E avInicial: numero; E caInicial: numero)
  variables
    avUlt,caUlt: numero
  comenzar
    si (cantidad <> 0)
      BloquearEsquina(1, 50)
      Pos(1, 50)
      derecha

      mientras ((cantidad > 0) & (PosAv < 100))
        BloquearEsquina(PosAv + 1, PosCa)
        si (caInicial = 1) {Caso corredores}
          depositarPapel
        sino {Caso escaladores: Calle 51}
          depositarFlor
        cantidad:= cantidad - 1
        mover
        LiberarEsquina(PosAv - 1, PosCa)
      avUlt:= PosAv
      caUlt:= PosCa
 
      Informar('Avenida', avUlt - 1)  {Informamos la ultima esquina donde pudo depositar}
      
      Pos(avInicial, caInicial)
      LiberarEsquina(avUlt, caUlt)
      
    sino {Caso en el que no recolecta elementos en su recorrido}
      Informar('Avenida',1)
  fin
  


  proceso izquierda
  comenzar
    repetir 3
      derecha
  fin
  
  proceso realizarSalto(ES papeles: numero;ES corteWhile: boolean)
  variables
    alto: numero
  comenzar
    juntarPapeles(papeles)
    Random(alto, 1, 5)
    si ((PosCa + alto) < 49)
      Pos(PosAv, PosCa + alto)
    sino
      corteWhile:= F
  fin
  
  proceso realizarEscalon(ES flores: numero; ES avUlt: numero; ES caUlt: numero)
  variables
    alto, ancho: numero
  comenzar
    alto:= 3

    repetir alto
      juntarFlores(flores)
      BloquearEsquina(PosAv, PosCa + 1)
      mover
      LiberarEsquina(PosAv, PosCa - 1)
    
    derecha
    
    Random(ancho,3,5)
    repetir ancho
      juntarFlores(flores)
      BloquearEsquina(PosAv + 1, PosCa)
      mover
      LiberarEsquina(PosAv - 1, PosCa)
    avUlt:= PosAv
    caUlt:= PosCa
    izquierda
  fin
  
  
  
  proceso juntarFlores(ES flores: numero)
  comenzar
    mientras (HayFlorEnLaEsquina)
      tomarFlor
      flores:= flores + 1
  fin
  
  proceso juntarPapeles(ES papeles: numero)
  comenzar
    mientras(HayPapelEnLaEsquina)
      tomarPapel
      papeles:= papeles + 1
  fin
  
 
  


areas
  AreaJuez: AreaP(1, 1, 1, 1)
  
  AreaCVerde: AreaP(5, 1, 5, 49)
  AreaCAmarillo: AreaP(10, 1, 10, 49)
  AreaCRosa: AreaP(15, 1, 15, 49) 
  AreaCNegro: AreaP(20, 1, 20, 49)

  {Consideramos peores casos de ultimos para limites}
  AreaEscaladores: AreaC(5, 51, 55, 66)
  
  {Deposito de los ganadores}
  AreaDeposito: AreaPC(100, 1, 100, 1)
  
  {Deposito de los perdedores}
  AreaRestos: AreaC(1, 50, 100, 50)
  
robots
  robot rCorredor 
  variables
    id, papeles, avInicial, caInicial: numero
    ganador, corteWhile: boolean
  comenzar
    {Etapa 1: Recepcion de identificadores y recorrido propio de los corredores}
    RecibirMensaje(id, juez)
    avInicial:= PosAv
    caInicial:= PosCa
    corteWhile:= V
    
    mientras ((PosCa < 49) & (corteWhile))
      realizarSalto(papeles, corteWhile)
    Pos(avInicial, caInicial) 
    
    
    {Etapa 2: Pasaje de postas por parte de los corredores para cada uno de sus analogos y envio de papeles juntados al juez}
    si (id = 1)
      EnviarMensaje(V, escaladorVerde)
    sino
      si (id = 2)
        EnviarMensaje(V, escaladorAmarillo)
      sino
        si (id = 3)
          EnviarMensaje(V, escaladorRosa)
        sino
          EnviarMensaje(V, escaladorNegro)
          
    EnviarMensaje(id, juez)
    EnviarMensaje(papeles, juez)
    
    
    {Etapa 3: Recibe y realiza su respectiva tarea, de acuerdo a si gano o perdio}
    RecibirMensaje(ganador, juez)
    si (ganador)
      BloquearEsquina(100, 1)
      Pos(100, 1)
      mientras (papeles > 0)
        depositarPapel
        papeles:= papeles - 1
      Pos(avInicial, caInicial)
      LiberarEsquina(100, 1) 
    sino
      depositarPerdedor(papeles, avInicial, caInicial)
  fin
  
  robot rEscalador 
  variables
    id, ancho, flores, caInicial, avInicial, avUlt, caUlt: numero
    ganador, habilitado: boolean
  comenzar
    {Etapa 1: Recibe identificador del juez y espera a recibir la posta de su corredor analogo}
    avInicial:= PosAv
    caInicial:= PosCa
    RecibirMensaje(id, juez) 
    si (id = 5)  
      RecibirMensaje(habilitado, corredorVerde) 
    sino
      si (id = 6)
        RecibirMensaje(habilitado, corredorAmarillo)
      sino
        si (id = 7) 
          RecibirMensaje(habilitado, corredorRosa)
        sino
          RecibirMensaje(habilitado, corredorNegro)   
          
    
    {Etapa 2: Recorrido propio de los escaladores}
    repetir 5
      realizarEscalon(flores, avUlt, caUlt)
    LiberarEsquina(avUlt, caUlt) {Liberamos ultima esquina de cada escalador} 
    Pos(avInicial, caInicial)
    
    
    {Etapa 3: Envio de flores juntadas al juez}
    EnviarMensaje(id, juez)
    EnviarMensaje(flores, juez)
    
    
    {Etapa 4: Recibe y realiza su respectiva tarea, de acuerdo a si gano o perdio}
    RecibirMensaje(ganador, juez)
    si (ganador)
      BloquearEsquina(100, 1)
      Pos(100, 1)
      mientras (flores > 0)
        depositarFlor
        flores:= flores - 1
      Pos(avInicial, caInicial)
      LiberarEsquina(100, 1)
      
    sino
      depositarPerdedor(flores, avInicial, caInicial)
     
  fin
  
  robot rJuez
  variables
    maxFlores, maxFloresId, maxPapeles, maxPapelesId, id, flores, papeles: numero
  comenzar
   {Etapa 1: Envio de identificadores a los robots}
    EnviarMensaje(1, corredorVerde)
    EnviarMensaje(2, corredorAmarillo)
    EnviarMensaje(3, corredorRosa)
    EnviarMensaje(4, corredorNegro)
    
    EnviarMensaje(5, escaladorVerde)
    EnviarMensaje(6, escaladorAmarillo)
    EnviarMensaje(7, escaladorRosa)
    EnviarMensaje(8, escaladorNegro)
    
    {Etapa 2: Procesamiento de flores(escaladores) y papeles(corredores) para determinar ganadores y perdedores}
    repetir 8 
      RecibirMensaje (id, *)
      si (id = 1) 
        RecibirMensaje(papeles, corredorVerde)
        si (papeles > maxPapeles) 
          maxPapeles:= papeles
          maxPapelesId:= id
      sino 
        si (id = 2) 
          RecibirMensaje(papeles, corredorAmarillo)
          si (papeles > maxPapeles) 
            maxPapeles:= papeles
            maxPapelesId:= id

        sino
          si (id = 3)
            RecibirMensaje(papeles, corredorRosa)
            si (papeles > maxPapeles) 
              maxPapeles:= papeles
              maxPapelesId:= id
          sino
            si (id = 4)
              RecibirMensaje(papeles, corredorNegro)
              si (papeles > maxPapeles) 
                maxPapeles:= papeles
                maxPapelesId:= id
            sino
              si (id = 5)
                RecibirMensaje(flores, escaladorVerde)
                si (flores > maxFlores)
                  maxFlores := flores
                  maxFloresId := id
              sino
                si (id = 6)
                  RecibirMensaje(flores, escaladorAmarillo)
                  si (flores > maxFlores)
                    maxFlores := flores
                    maxFloresId := id
                sino
                  si (id = 7)
                    RecibirMensaje(flores, escaladorRosa)
                    si (flores > maxFlores)
                      maxFlores := flores
                      maxFloresId := id
                  sino
                    si (id = 8)
                      RecibirMensaje(flores, escaladorNegro)
                      si (flores > maxFlores)
                        maxFlores := flores
                        maxFloresId := id
                              
    {Etapa 3: Aviso a ganadores y perdedores para que realizen las tareas correspondientes}
    {corredores}
    si (maxPapelesId = 1)
      EnviarMensaje(V, corredorVerde)
      EnviarMensaje(F, corredorAmarillo)
      EnviarMensaje(F, corredorRosa)
      EnviarMensaje(F, corredorNegro)
    sino
      si (maxPapelesId = 2)
        EnviarMensaje(F, corredorVerde)
        EnviarMensaje(V, corredorAmarillo)
        EnviarMensaje(F, corredorRosa)
        EnviarMensaje(F, corredorNegro)
      sino
        si (maxPapelesId = 3)
          EnviarMensaje(F, corredorVerde)
          EnviarMensaje(F, corredorAmarillo)
          EnviarMensaje(V, corredorRosa)
          EnviarMensaje(F, corredorNegro)
        sino
          EnviarMensaje(F, corredorVerde)
          EnviarMensaje(F, corredorAmarillo)
          EnviarMensaje(F, corredorRosa)
          EnviarMensaje(V, corredorNegro)
    {escaladores}
    si (maxFloresId = 5)
      EnviarMensaje(V, escaladorVerde)
      EnviarMensaje(F, escaladorAmarillo)
      EnviarMensaje(F, escaladorRosa)
      EnviarMensaje(F, escaladorNegro)
    sino
      si (maxFloresId = 6)
        EnviarMensaje(F, escaladorVerde)
        EnviarMensaje(V, escaladorAmarillo)
        EnviarMensaje(F, escaladorRosa)
        EnviarMensaje(F, escaladorNegro)
      sino
        si (maxFloresId = 7)
          EnviarMensaje(F, escaladorVerde)
          EnviarMensaje(F, escaladorAmarillo)
          EnviarMensaje(V, escaladorRosa)
          EnviarMensaje(F, escaladorNegro)
        sino
          EnviarMensaje(F, escaladorVerde)
          EnviarMensaje(F, escaladorAmarillo)
          EnviarMensaje(F, escaladorRosa)
          EnviarMensaje(V, escaladorNegro) 
  fin 


variables
  corredorVerde: rCorredor 
  corredorAmarillo: rCorredor 
  corredorRosa: rCorredor 
  corredorNegro: rCorredor 
  escaladorVerde: rEscalador 
  escaladorAmarillo: rEscalador 
  escaladorRosa: rEscalador 
  escaladorNegro: rEscalador
  juez: rJuez
  
comenzar 
  AsignarArea(juez, AreaJuez)

  AsignarArea(corredorVerde, AreaCVerde)
  AsignarArea(corredorAmarillo, AreaCAmarillo)
  AsignarArea(corredorRosa, AreaCRosa)
  AsignarArea(corredorNegro, AreaCNegro)

  AsignarArea(escaladorVerde, AreaEscaladores)
  AsignarArea(escaladorAmarillo, AreaEscaladores)
  AsignarArea(escaladorRosa, AreaEscaladores)
  AsignarArea(escaladorNegro, AreaEscaladores)

  AsignarArea(corredorVerde, AreaRestos)
  AsignarArea(corredorAmarillo, AreaRestos)
  AsignarArea(corredorRosa, AreaRestos)
  AsignarArea(corredorNegro, AreaRestos)

  AsignarArea(escaladorVerde, AreaRestos)
  AsignarArea(escaladorAmarillo, AreaRestos)
  AsignarArea(escaladorRosa, AreaRestos)
  AsignarArea(escaladorNegro, AreaRestos)

  AsignarArea(corredorVerde, AreaDeposito)
  AsignarArea(corredorAmarillo, AreaDeposito)
  AsignarArea(corredorRosa, AreaDeposito)
  AsignarArea(corredorNegro, AreaDeposito)


  AsignarArea(escaladorVerde, AreaDeposito)
  AsignarArea(escaladorAmarillo, AreaDeposito)
  AsignarArea(escaladorRosa, AreaDeposito)
  AsignarArea(escaladorNegro, AreaDeposito)

  
  Iniciar(juez, 1, 1) 
  
  Iniciar(corredorVerde, 5, 1)
  Iniciar(corredorAmarillo, 10, 1)
  Iniciar(corredorRosa, 15, 1)
  Iniciar(corredorNegro, 20, 1)
  
  Iniciar(escaladorVerde, 5, 51)
  Iniciar(escaladorAmarillo, 10, 51)
  Iniciar(escaladorRosa, 15, 51)
  Iniciar(escaladorNegro, 20, 51)

fin
